name: Build & Deploy container to Azure Web App (no publish profile)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write   # required for OIDC login to Azure

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: futurecoder                # change if you like
  APP_NAME: PythonCoding                 # <-- your Azure Web App name
  RESOURCE_GROUP: MSAN-RG-Training       # <-- your RG name
  WEBSITES_PORT: "80"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute tags
        id: meta
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "owner=${OWNER_LC}" >> $GITHUB_OUTPUT
          echo "tag_sha=${{ env.REGISTRY }}/${OWNER_LC}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "tag_latest=${{ env.REGISTRY }}/${OWNER_LC}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tag_sha }}
            ${{ steps.meta.outputs.tag_latest }}

      # --- Azure login via OIDC (no publish profile) ---
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Ensure WEBSITES_PORT is set
      - name: Set app settings
        run: |
          az webapp config appsettings set \
            --name "${{ env.APP_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --settings WEBSITES_PORT=${{ env.WEBSITES_PORT }}

      # If image is PUBLIC on GHCR, you can omit the credentials block and just set --docker-custom-image-name
      - name: Configure container (public GHCR)
        if: ${{ secrets.GHCR_READ_TOKEN == '' }}
        run: |
          az webapp config container set \
            --name "${{ env.APP_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --docker-custom-image-name "${{ steps.meta.outputs.tag_sha }}"

      # If image is PRIVATE on GHCR, pass registry credentials for the Web App to pull the image
      - name: Configure container (private GHCR)
        if: ${{ secrets.GHCR_READ_TOKEN != '' }}
        run: |
          az webapp config container set \
            --name "${{ env.APP_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --docker-custom-image-name "${{ steps.meta.outputs.tag_sha }}" \
            --docker-registry-server-url "https://${{ env.REGISTRY }}" \
            --docker-registry-server-user "${{ github.actor }}" \
            --docker-registry-server-password "${{ secrets.GHCR_READ_TOKEN }}"
