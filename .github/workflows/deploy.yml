name: Build & Deploy container to Azure Web App (OIDC, GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write   # needed for azure/login OIDC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: futurecoder                 # change if you prefer
  APP_NAME: PythonCoding                  # <-- your Azure Web App name
  RESOURCE_GROUP: MSAN-RG-Training        # <-- your Azure Resource Group
  WEBSITES_PORT: "80"
  DOCKER_BUILDKIT: "1"
  BUILDKIT_PROGRESS: plain

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image tags
        id: meta
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "owner=${OWNER_LC}" >> $GITHUB_OUTPUT
          echo "tag_sha=${{ env.REGISTRY }}/${OWNER_LC}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "tag_latest=${{ env.REGISTRY }}/${OWNER_LC}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (push)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tag_sha }}
            ${{ steps.meta.outputs.tag_latest }}

      # ---- Azure login via OIDC (no publish profile needed) ----
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Ensure WEBSITES_PORT is set on the Web App
      - name: Set app settings
        run: |
          az webapp config appsettings set \
            --name "${{ env.APP_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --settings WEBSITES_PORT=${{ env.WEBSITES_PORT }} \
                       REACT_APP_PROGRESS_API_BASE=${{ secrets.REACT_APP_PROGRESS_API_BASE }} \
                       REACT_APP_PROGRESS_API_KEY=${{ secrets.REACT_APP_PROGRESS_API_KEY }} \
                       REACT_APP_ADMIN_EMAILS=${{ secrets.REACT_APP_ADMIN_EMAILS }}

      # Derive a flag from secret (don't reference secrets in `if:` directly)
      - name: Determine if GHCR is private
        id: ghcr
        shell: bash
        env:
          GHCR_READ_TOKEN: ${{ secrets.GHCR_READ_TOKEN }}
        run: |
          if [ -n "${GHCR_READ_TOKEN}" ]; then
            echo "use_auth=true" >> $GITHUB_OUTPUT
          else
            echo "use_auth=false" >> $GITHUB_OUTPUT
          fi

      # Configure container for PUBLIC GHCR image (no creds)
      - name: Configure container (public GHCR)
        if: ${{ steps.ghcr.outputs.use_auth == 'false' }}
        run: |
          az webapp config container set \
            --name "${{ env.APP_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --docker-custom-image-name "${{ steps.meta.outputs.tag_sha }}"

      # Configure container for PRIVATE GHCR image (with creds)
      - name: Configure container (private GHCR)
        if: ${{ steps.ghcr.outputs.use_auth == 'true' }}
        run: |
          az webapp config container set \
            --name "${{ env.APP_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --docker-custom-image-name "${{ steps.meta.outputs.tag_sha }}" \
            --docker-registry-server-url "https://${{ env.REGISTRY }}" \
            --docker-registry-server-user "${{ github.actor }}" \
            --docker-registry-server-password "${{ secrets.GHCR_READ_TOKEN }}"

      # (Optional) Restart the app to pick the new image immediately
      - name: Restart Web App
        run: |
          az webapp restart --name "${{ env.APP_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}"
