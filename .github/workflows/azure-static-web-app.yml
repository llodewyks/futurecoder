name: Deploy futurecoder to Azure Static Web Apps

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Python phase (dependencies + content generation) ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.1'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Make project scripts executable
        run: |
          chmod +x scripts/generate.sh || true
          chmod +x scripts/build.sh || true

      - name: Generate site content (translations/static files)
        env:
          FUTURECODER_LANGUAGE: en
        run: |
          poetry install --no-root
          ./scripts/generate.sh

      # --- Node phase (project build script) ---
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Keep CRA assets on relative URLs (so they work under /course/)
      - name: Override CRA homepage to relative URLs
        working-directory: frontend
        run: |
          node -e "let p=require('./package.json'); p.homepage='.'; require('fs').writeFileSync('package.json', JSON.stringify(p,null,2)); console.log('homepage now', p.homepage)"

      - name: Build with project script
        env:
          FUTURECODER_LANGUAGE: en
          REACT_APP_USE_FIREBASE_EMULATORS: '1'
          REACT_APP_FIREBASE_STAGING: '1'
          CI: false
        run: |
          ./scripts/build.sh

      # --- Verify course output & core archives ---
      - name: Verify course output & core archives
        run: |
          bash -eo pipefail <<'BASH'
          echo "frontend/course (dirs):"
          find frontend/course -maxdepth 2 -type d -print
          # must exist
          test -f frontend/course/index.html
          test -d frontend/course/pyodide
          # these are what the runtime requests at /course/â€¦
          # if your build puts versioned filenames, we'll normalize next
          ls -la frontend/course | sed -n '1,200p'
          BASH

      - name: Normalize core archive names if versioned
        run: |
          bash -eo pipefail <<'BASH'
          CORE=$(find frontend/course -type f -name 'python_core*.tar' | head -n1 || true)
          STDLIB=$(find frontend/course -type f -name 'python_stdlib*.zip' | head -n1 || true)
          if [ -n "$CORE" ] && [ ! -f frontend/course/python_core.tar ]; then
            cp -f "$CORE" frontend/course/python_core.tar
          fi
          if [ -n "$STDLIB" ] && [ ! -f frontend/course/python_stdlib.zip ]; then
            cp -f "$STDLIB" frontend/course/python_stdlib.zip
          fi
          test -f frontend/course/python_core.tar
          test -f frontend/course/python_stdlib.zip
          BASH

      # --- Stage deploy/ for SWA (keep /course path) ---
      - name: Stage files for SWA
        run: |
          bash -eo pipefail <<'BASH'
          set -e
          rm -rf deploy
          mkdir -p deploy/course
          cp -R frontend/course/* deploy/course/

          # Root -> /course/
          cat > deploy/index.html <<'HTML'
          <!DOCTYPE html>
          <meta http-equiv="refresh" content="0; url=/course/">
          HTML

          # SWA routes: serve assets first, then SPA fallback
          cat > deploy/staticwebapp.config.json <<'JSON'
          {
            "routes": [
              { "route": "/", "redirect": "/course/", "statusCode": 302 },

              { "route": "/course/static/*",   "serve": "/course/static/*"   },
              { "route": "/course/pyodide/*",  "serve": "/course/pyodide/*"  },
              { "route": "/course/wheels/*",   "serve": "/course/wheels/*"   },
              { "route": "/course/packages/*", "serve": "/course/packages/*" },

              { "route": "/course/*.whl",      "serve": "/course/*.whl"      },
              { "route": "/course/*.wasm",     "serve": "/course/*.wasm"     },
              { "route": "/course/*.data",     "serve": "/course/*.data"     },
              { "route": "/course/*.js",       "serve": "/course/*.js"       },
              { "route": "/course/*.css",      "serve": "/course/*.css"      },
              { "route": "/course/*.map",      "serve": "/course/*.map"      },
              { "route": "/course/*.json",     "serve": "/course/*.json"     },

              { "route": "/course/python_core.tar*",   "serve": "/course/python_core.tar" },
              { "route": "/course/python_stdlib.zip*", "serve": "/course/python_stdlib.zip" },

              { "route": "/course/*", "rewrite": "/course/index.html" }
            ],
            "mimeTypes": {
              ".wasm": "application/wasm",
              ".whl":  "application/octet-stream",
              ".data": "application/octet-stream"
            }
          }
          JSON

          echo "Deploy tree (top levels):"
          find deploy -maxdepth 2 -type d -print
          ls -la deploy/course | sed -n '1,200p'
          BASH

      # --- Final sanity: files that must exist in the artifact ---
      - name: Verify deploy artifact essentials
        run: |
          bash -eo pipefail <<'BASH'
          test -f deploy/course/index.html
          test -d deploy/course/pyodide
          test -f deploy/course/python_core.tar
          test -f deploy/course/python_stdlib.zip
          BASH

      # --- Upload to SWA (no server build; just upload) ---
      - name: Deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: "deploy"
          skip_app_build: true
