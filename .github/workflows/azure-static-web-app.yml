name: Deploy futurecoder to Azure Static Web Apps

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Python phase (dependencies + content generation) ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.1'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Make project scripts executable
        run: |
          chmod +x scripts/generate.sh || true
          chmod +x scripts/build.sh || true

      - name: Generate site content (translations/static files)
        env:
          FUTURECODER_LANGUAGE: en
        run: |
          poetry install --no-root
          ./scripts/generate.sh

      # --- Node phase (install deps + project build script) ---
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      # Keep CRA assets on relative URLs in case the app isn't forcing /course
      - name: Override CRA homepage to relative URLs
        working-directory: frontend
        run: |
          node -e "let p=require('./package.json'); p.homepage='.'; require('fs').writeFileSync('package.json', JSON.stringify(p,null,2)); console.log('homepage now', p.homepage)"

      - name: Build with project script
        env:
          FUTURECODER_LANGUAGE: en
          REACT_APP_USE_FIREBASE_EMULATORS: '1'
          REACT_APP_FIREBASE_STAGING: '1'
          CI: false
        run: |
          ./scripts/build.sh

      # --- Figure out where the build landed (dist/course or frontend/course) ---
      - name: Detect course output dir
        id: outdir
        run: |
          if [ -d dist/course ]; then
            echo "dir=dist/course" >> $GITHUB_OUTPUT
          elif [ -d frontend/course ]; then
            echo "dir=frontend/course" >> $GITHUB_OUTPUT
          else
            echo "No course output found"; exit 1
          fi
          echo "Detected output dir: $(cat $GITHUB_OUTPUT)"

      - name: Verify & normalize core archives
        id: norm
        run: |
          OUT="${{ steps.outdir.outputs.dir }}"
          echo "OUT=$OUT"

          echo "Tree (2 levels):"
          find "$OUT" -maxdepth 2 -type d -print

          echo "Listing $OUT/pyodide:"
          ls -la "$OUT/pyodide" || true

          # Find stdlib and (optional) core
          CORE="$(find "$OUT" -type f -name 'python_core*.tar' | head -n1 || true)"
          STDLIB="$(find "$OUT" -type f -name 'python_stdlib*.zip' | head -n1 || true)"
          echo "Found CORE=$CORE"
          echo "Found STDLIB=$STDLIB"

          # Normalize: always copy stdlib to course root; core only if present
          if [ -n "$STDLIB" ]; then cp -f "$STDLIB" "$OUT/python_stdlib.zip"; fi
          if [ -n "$CORE" ];  then cp -f "$CORE"  "$OUT/python_core.tar"; fi

          # Must-haves
          test -f "$OUT/index.html"
          test -d "$OUT/pyodide"
          test -f "$OUT/python_stdlib.zip"   # required

          # Optional: core tar (don’t fail if absent)
          if [ -f "$OUT/python_core.tar" ]; then echo "python_core.tar present"; else echo "python_core.tar not present (ok)"; fi

          echo "Course root after normalization:"
          ls -la "$OUT" | sed -n '1,200p'

          echo "dir=$OUT" >> "$GITHUB_OUTPUT"

      # --- Stage deploy/ for SWA (keep /course path) ---
      - name: Stage files for SWA
        run: |
          bash -eo pipefail <<'BASH'
          set -e
          OUT="${{ steps.norm.outputs.dir || steps.outdir.outputs.dir || 'dist/course' }}"
          rm -rf deploy
          mkdir -p deploy/course
          cp -R "$OUT"/* deploy/course/
      
          # Root -> /course/
          cat > deploy/index.html <<'HTML'
          <!DOCTYPE html>
          <meta http-equiv="refresh" content="0; url=/course/">
          HTML
      
          # Valid JSON only — no comments/trailing commas
          cat > deploy/staticwebapp.config.json <<'JSON'
          {
            "routes": [
              { "route": "/", "redirect": "/course/", "statusCode": 302 },
      
              { "route": "/course/static/*",   "serve": "/course/static/*"   },
              { "route": "/course/pyodide/*",  "serve": "/course/pyodide/*"  },
              { "route": "/course/wheels/*",   "serve": "/course/wheels/*"   },
              { "route": "/course/packages/*", "serve": "/course/packages/*" },
      
              { "route": "/course/*.whl",      "serve": "/course/*.whl"      },
              { "route": "/course/*.wasm",     "serve": "/course/*.wasm"     },
              { "route": "/course/*.data",     "serve": "/course/*.data"     },
              { "route": "/course/*.js",       "serve": "/course/*.js"       },
              { "route": "/course/*.css",      "serve": "/course/*.css"      },
              { "route": "/course/*.map",      "serve": "/course/*.map"      },
              { "route": "/course/*.json",     "serve": "/course/*.json"     },
      
              { "route": "/course/python_stdlib.zip*", "serve": "/course/python_stdlib.zip" },
              { "route": "/course/static/js/static/media/python_core.tar*", "serve": "/course/python_stdlib.zip" },
      
              { "route": "/course/*", "rewrite": "/course/index.html" }
            ],
            "mimeTypes": {
              ".wasm": "application/wasm",
              ".whl":  "application/octet-stream",
              ".data": "application/octet-stream",
              ".load_by_url": "application/octet-stream"
            }
          }
          JSON
      
          BASH

      # --- Final sanity: files that must exist in the artifact ---
      - name: Verify deploy artifact essentials
        run: |
          test -f deploy/course/index.html
          test -d deploy/course/pyodide
          test -f deploy/course/python_stdlib.zip    # required by runtime
          # python_core.tar is optional in recent Pyodide builds
          if [ -f deploy/course/python_core.tar ]; then
            echo "python_core.tar present (optional)";
          else
            echo "python_core.tar not present (ok)";
          fi

      # --- Upload to SWA (upload only; skip Oryx) ---
      - name: Deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: "deploy"
          skip_app_build: true
