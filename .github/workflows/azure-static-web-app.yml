name: Deploy futurecoder to Azure Static Web Apps

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Python build phase (futurecoder content generation) ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.1'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Generate site content
        env:
          FUTURECODER_LANGUAGE: en
        run: |
          poetry install --no-root
          ./scripts/generate.sh

      # --- Node build phase (frontend bundle) ---
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Override CRA homepage to relative URLs
        working-directory: frontend
        run: |
          node -e "let p=require('./package.json'); p.homepage='.'; require('fs').writeFileSync('package.json', JSON.stringify(p,null,2)); console.log('homepage now', p.homepage)"

      - name: Install and build frontend
        working-directory: frontend
        env:
          CI: false
        run: |
          npm ci
          npm run build
          # If the project expects a service worker from the course folder, copy it if present
          if [ -f "../course/service-worker.js" ]; then cp ../course/service-worker.js public/service-worker.js; fi

      - name: Verify build output
        run: |
          echo "frontend contents:"
          ls -la frontend || true
          echo "frontend/course contents:"
          ls -la frontend/course || true
            test -f frontend/course/index.html

      - name: Add SWA routing config
        run: |
          cat > frontend/course/staticwebapp.config.json <<'JSON'
          { "routes": [ { "route": "/*", "serve": "/index.html", "statusCode": 200 } ] }
          JSON


      - name: Stage files for SWA
        run: |
          rm -rf deploy
          mkdir -p deploy/course
          cp -R frontend/course/* deploy/course/
      
          # root -> /course/
          cat > deploy/index.html <<'HTML'
          <!DOCTYPE html>
          <meta http-equiv="refresh" content="0; url=/course/">
          HTML
      
          # Serve static + package assets explicitly, then SPA fallback
          cat > deploy/staticwebapp.config.json <<'JSON'
          {
            "routes": [
              { "route": "/", "redirect": "/course/", "statusCode": 302 },
      
              { "route": "/course/static/*",   "serve": "/course/static/*"   },
              { "route": "/course/pyodide/*",  "serve": "/course/pyodide/*"  },
              { "route": "/course/wheels/*",   "serve": "/course/wheels/*"   },
              { "route": "/course/packages/*", "serve": "/course/packages/*" },
              { "route": "/course/*.whl",      "serve": "/course/*.whl"      },
              { "route": "/course/*.wasm",     "serve": "/course/*.wasm"     },
              { "route": "/course/*.data",     "serve": "/course/*.data"     },
              { "route": "/course/*.js",       "serve": "/course/*.js"       },
              { "route": "/course/*.css",      "serve": "/course/*.css"      },
              { "route": "/course/*.map",      "serve": "/course/*.map"      },
              { "route": "/course/*.json",     "serve": "/course/*.json"     },
      
              { "route": "/course/*", "rewrite": "/course/index.html" }
            ],
            "mimeTypes": {
              ".wasm": "application/wasm",
              ".whl":  "application/octet-stream",
              ".data": "application/octet-stream"
            }
          }
          JSON
      
          echo "Show top-level folders:"
          find deploy/course -maxdepth 2 -type d -print

      - name: Verify package folders exist
        run: |
          echo "Expect wheels/packages here:"
          ls -la deploy/course/wheels || true
          ls -la deploy/course/packages || true
          # hard fail if neither exists
          if [ ! -d deploy/course/wheels ] && [ ! -d deploy/course/packages ]; then
            echo "No wheels/packages folder found in build output."; exit 1; fi

      - name: Vendor Pyodide full runtime and a few wheels
        run: |
          set -e
          PYODIDE_VER=0.24.1
          BASE="https://cdn.jsdelivr.net/pyodide/v${PYODIDE_VER}/full"
          mkdir -p deploy/course/pyodide
      
          echo "Fetch core runtime..."
          curl -fsSL "$BASE/pyodide.js"        -o deploy/course/pyodide/pyodide.js
          curl -fsSL "$BASE/pyodide.asm.wasm"  -o deploy/course/pyodide/pyodide.asm.wasm
          curl -fsSL "$BASE/pyodide.asm.data"  -o deploy/course/pyodide/pyodide.asm.data
          curl -fsSL "$BASE/repodata.json"     -o deploy/course/pyodide/repodata.json
      
          echo "Prime a few common wheels (add more if Network tab shows 404s):"
          for pkg in micropip pyparsing packaging; do
            curl -fsSL "$BASE/$pkg.whl" -o "deploy/course/pyodide/$pkg.whl" || true
          done
      
          echo "Staged files:"
          ls -la deploy/course/pyodide

      - name: Deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
            azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
            action: upload
            app_location: "deploy"   # <-- correct folder
            skip_app_build: true

