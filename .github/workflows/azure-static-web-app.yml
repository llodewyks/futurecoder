name: Deploy futurecoder to Azure Static Web Apps

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Python phase (generate content for frontend) ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.1'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Make project scripts executable
        run: |
          chmod +x scripts/generate.sh || true
          chmod +x scripts/build.sh || true

      - name: Generate site content
        env:
          FUTURECODER_LANGUAGE: en
        run: |
          poetry install --no-root
          ./scripts/generate.sh

      # --- Node phase (install deps + build) ---
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Override CRA homepage to relative URLs
        working-directory: frontend
        run: |
          node -e "let p=require('./package.json'); p.homepage='.'; require('fs').writeFileSync('package.json', JSON.stringify(p,null,2)); console.log('homepage now', p.homepage)"

      - name: Build with project script
        env:
          FUTURECODER_LANGUAGE: en
          REACT_APP_USE_FIREBASE_EMULATORS: '1'
          REACT_APP_FIREBASE_STAGING: '1'
          CI: false
        run: ./scripts/build.sh

      # --- Where did the build land? (dist/course or frontend/course) ---
      - name: Detect course output dir
        id: outdir
        run: |
          if [ -d dist/course ]; then
            echo "dir=dist/course" >> $GITHUB_OUTPUT
          elif [ -d frontend/course ]; then
            echo "dir=frontend/course" >> $GITHUB_OUTPUT
          else
            echo "No course output found"; exit 1
          fi
          echo "Detected: $(cat $GITHUB_OUTPUT)"

      - name: Verify & normalize archives
        id: norm
        run: |
          OUT="${{ steps.outdir.outputs.dir }}"
          echo "OUT=$OUT"
          ls -la "$OUT" | sed -n '1,200p'
          test -f "$OUT/index.html"
          test -d "$OUT/pyodide"
          # normalize stdlib/core names if present
          STDLIB="$(find "$OUT" -type f -name 'python_stdlib*.zip' | head -n1 || true)"
          CORE="$(find "$OUT" -type f -name 'python_core*.tar' | head -n1 || true)"
          [ -n "$STDLIB" ] && cp -f "$STDLIB" "$OUT/python_stdlib.zip" || true
          [ -n "$CORE" ] && cp -f "$CORE" "$OUT/python_core.tar" || true
          test -f "$OUT/python_stdlib.zip"
          echo "dir=$OUT" >> "$GITHUB_OUTPUT"

      # --- Stage deploy folder ---
      - name: Stage files for SWA
        run: |
          set -e
          OUT="${{ steps.norm.outputs.dir }}"
          rm -rf deploy
          mkdir -p deploy/course
          cp -R "$OUT"/* deploy/course/

          # Root -> /course/
          cat > deploy/index.html <<'HTML'
          <!DOCTYPE html>
          <meta http-equiv="refresh" content="0; url=/course/">
          HTML

      # --- Write & validate staticwebapp.config.json (valid JSON, one-wildcard routes first) ---
      - name: Write & validate staticwebapp.config.json
        run: |
          set -e
          node - <<'NODE'
          const fs = require('fs');
          const cfg = {
            routes: [
              { route: "/", redirect: "/course/", statusCode: 302 },

              // Serve the real core tar for any hashed request at root or CRA media path
              { route: "/course/python_core.tar*", serve: "/course/python_core.tar" },
              { route: "/course/static/js/static/media/python_core.tar*", serve: "/course/python_core.tar" },

              // Let index.html handle SPA routes; static assets are direct
              { route: "/course/*", rewrite: "/course/index.html" }
            ],
            mimeTypes: {
              ".wasm": "application/wasm",
              ".whl":  "application/octet-stream",
              ".data": "application/octet-stream",
              ".load_by_url": "application/octet-stream"
            }
          };
          const p = "deploy/staticwebapp.config.json";
          fs.writeFileSync(p, JSON.stringify(cfg, null, 2));
          JSON.parse(fs.readFileSync(p, "utf8")); // validate
          console.log("Wrote valid", p);
          NODE

      # --- Vend Pyodide core tar as deploy/course/python_core.tar (with validation) ---
      - name: Vendor Pyodide core tar (python_core.tar) with validation
        run: |
          set -e
          OUT="${{ steps.norm.outputs.dir }}"
          mkdir -p deploy/course

          VER=$(node -p "require('./${OUT}/pyodide/package.json').version")
          echo "Pyodide version: $VER"

          CANDIDATES=(
            "https://cdn.jsdelivr.net/pyodide/v${VER}/full/pyodide-core-${VER}.tar.bz2"
            "https://repo.pyodide.org/pyodide/v${VER}/full/pyodide-core-${VER}.tar.bz2"
            "https://github.com/pyodide/pyodide/releases/download/${VER}/pyodide-core-${VER}.tar.bz2?download=1"
          )

          OK=""
          for URL in "${CANDIDATES[@]}"; do
            echo "Trying $URL"
            if curl -LfsS --retry 3 --retry-delay 2 \
                 -H "User-Agent: GitHubActions" \
                 -H "Accept: application/octet-stream" \
                 "$URL" -o deploy/course/python_core.tar; then
              MAGIC=$(head -c 3 deploy/course/python_core.tar || true)
              if [ "$MAGIC" = $'BZh' ]; then
                echo "Fetched a VALID bzip2 tar from: $URL"
                OK="yes"
                break
              else
                echo "Downloaded bytes are NOT a bzip2 tar (magic='$MAGIC'). Trying next source…"
              fi
            else
              echo "Download failed from: $URL"
            fi
          done

          if [ -z "$OK" ]; then
            echo "ERROR: Could not fetch a valid pyodide core tar (bzip2)."
            echo "First bytes of the last attempt:"
            head -c 200 deploy/course/python_core.tar | sed -e 's/[^[:print:]\t]/./g' || true
            exit 1
          fi

          test -s deploy/course/python_core.tar

      # --- Overwrite any hashed placeholders with the real tar (covers any path) ---
      - name: Overwrite hashed python_core placeholders with the real tar (file-system based)
        run: |
          set -e
          CORE="deploy/course/python_core.tar"
          test -s "$CORE"

          echo "Finding placeholder files named python_core.tar*.load_by_url under deploy/course…"
          mapfile -t TARGETS < <(find deploy/course -maxdepth 5 -type f -name "python_core.tar*.load_by_url" | sort || true)
          echo "Found ${#TARGETS[@]} placeholder(s)."

          if [ "${#TARGETS[@]}" -gt 0 ]; then
            printf '%s\n' "${TARGETS[@]}"
            for f in "${TARGETS[@]}"; do
              echo "Overwriting $f with core tar bytes…"
              cp -f "$CORE" "$f"
            done
            sudo apt-get update -y >/dev/null 2>&1 || true
            sudo apt-get install -y file >/dev/null 2>&1 || true
            file "$CORE" || true
            for f in "${TARGETS[@]}"; do file "$f" || true; done
          else
            echo "No placeholders found (routes will serve /course/python_core.tar)."
          fi

      # --- Final checks ---
      - name: Verify deploy artifact essentials
        run: |
          test -s deploy/course/index.html
          test -d deploy/course/pyodide
          test -s deploy/course/python_stdlib.zip
          test -s deploy/course/python_core.tar
          echo "Listing any materialized hashed files:"
          find deploy/course -maxdepth 5 -type f -name "python_core.tar*.load_by_url" -exec ls -l {} \;

      - name: Print staticwebapp.config.json
        run: cat -n deploy/staticwebapp.config.json

      # --- Deploy to SWA (no Oryx build) ---
      - name: Deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: "deploy"
          skip_app_build: true
